{"version":3,"sources":["my-canvas/index.js","my-canvas/drawImage.js","plugins/index.js","telemetry.js","App.js","reportWebVitals.js","index.js"],"names":["midPointBtw","p1","p2","x","y","canvasStyle","display","position","canvasTypes","name","zIndex","props","componentWillUnmount","canvasObserver","unobserve","canvasContainer","drawImage","imgSrc","image","Image","crossOrigin","onload","ctx","img","w","h","offsetX","offsetY","canvas","width","height","cx","cy","cw","ch","iw","ih","r","Math","min","nw","nh","ar","abs","grid","src","undo","lines","slice","clear","simulateDrawingLines","immediate","triggerOnChange","getSaveData","JSON","stringify","canvasWidth","canvasHeight","loadSaveData","saveData","immediateLoading","Error","parse","push","scaleX","scaleY","scaleAvg","map","line","points","p","brushRadius","curTime","timeoutGap","loadTimeOffset","forEach","brushColor","drawPoints","saveLine","i","window","setTimeout","length","handleDrawStart","e","preventDefault","isPressing","getPointerPos","touches","lazy","update","both","handlePointerMove","handleDrawMove","handleDrawEnd","isDrawing","handleCanvasResize","entries","observer","contentRect","setCanvasSize","interface","drawing","temp","drawGrid","loop","once","style","rect","getBoundingClientRect","clientX","clientY","changedTouches","left","top","disabled","isDisabled","isEnabled","brush","toObject","mouseHasMoved","lineJoin","lineCap","strokeStyle","clearRect","lineWidth","moveTo","beginPath","len","midPoint","quadraticCurveTo","lineTo","stroke","onChange","valuesChanged","pointer","getPointerCoordinates","getBrushCoordinates","drawInterface","requestAnimationFrame","hideGrid","console","log","setLineDash","gridColor","countX","countY","arc","PI","hideInterface","fillStyle","fill","catenaryColor","catenary","drawToCanvas","chainLength","Catenary","this","LazyBrush","radius","lazyRadius","devicePixelRatio","enabled","initialPoint","innerWidth","innerHeight","ResizeObserver","observe","initX","initY","prevProps","setRadius","className","background","backgroundColor","touchAction","ref","container","isInterface","getContext","onMouseDown","undefined","onMouseMove","onMouseUp","onMouseOut","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","PureComponent","defaultProps","MyCanvasDraw","state","mode","onChangeSize","dir","editorState","getEditorState","contentState","getCurrentContent","block","selectionState","SelectionState","anchorKey","getKey","anchorOffset","focusKey","focusOffset","blockData","Map","newHeight","getData","get","set","newContentState","Modifier","mergeBlockData","newEditorState","EditorState","setEditorState","onToggleMode","setState","color","flexDirection","canvasRef","marginLeft","onClick","marginBottom","React","Component","createSketchPlugin","config","store","initialize","handleBeforeInput","character","match","selection","getSelection","currentBlock","getBlockForKey","getStartKey","currentText","getText","setBlockType","entityKey","createEntity","content","getLastCreatedEntityKey","applyEntity","newBlock","ContentBlock","key","genKey","type","text","characterList","List","newBlockMap","getBlockMap","merge","blockMap","forceSelection","handleSlashCommand","decorateComponentWithProps","browserHistory","createBrowserHistory","basename","reactPlugin","ReactPlugin","appInsights","ApplicationInsights","instrumentationKey","maxBatchInterval","extensions","extensionConfig","identifier","history","loadAppInsights","INLINE_CODE_REGEX","initialContentData","CompositeDecorator","strategy","contentBlock","callback","regex","matchArr","start","exec","index","findWithRegex","component","borderRadius","padding","children","myStyleMap","votedButtonStyle","marginRight","sketchPlugin","plugins","createMarkdownShortcutsPlugin","App","createWithContent","convertFromRaw","voted","onVote","vote","fetch","method","headers","body","editor","focus","getLastBlock","customStyleMap","element","blockRendererFn","getType","getEntityAt","entity","getEntity","editable","marginTop","withAITracking","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01ed5891.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LazyBrush } from \"lazy-brush\";\r\nimport { Catenary } from \"catenary-curve\";\r\n\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nimport drawImage from \"./drawImage\";\r\n\r\nfunction midPointBtw(p1, p2) {\r\n  return {\r\n    x: p1.x + (p2.x - p1.x) / 2,\r\n    y: p1.y + (p2.y - p1.y) / 2\r\n  };\r\n}\r\n\r\nconst canvasStyle = {\r\n  display: \"block\",\r\n  position: \"absolute\"\r\n};\r\n\r\nconst canvasTypes = [\r\n  {\r\n    name: \"interface\",\r\n    zIndex: 15\r\n  },\r\n  {\r\n    name: \"drawing\",\r\n    zIndex: 11\r\n  },\r\n  {\r\n    name: \"temp\",\r\n    zIndex: 12\r\n  },\r\n  {\r\n    name: \"grid\",\r\n    zIndex: 10\r\n  }\r\n];\r\n\r\nconst dimensionsPropTypes = PropTypes.oneOfType([\r\n  PropTypes.number,\r\n  PropTypes.string\r\n]);\r\n\r\nexport default class extends PureComponent {\r\n  static propTypes = {\r\n    onChange: PropTypes.func,\r\n    loadTimeOffset: PropTypes.number,\r\n    lazyRadius: PropTypes.number,\r\n    brushRadius: PropTypes.number,\r\n    brushColor: PropTypes.string,\r\n    catenaryColor: PropTypes.string,\r\n    gridColor: PropTypes.string,\r\n    backgroundColor: PropTypes.string,\r\n    hideGrid: PropTypes.bool,\r\n    canvasWidth: dimensionsPropTypes,\r\n    canvasHeight: dimensionsPropTypes,\r\n    disabled: PropTypes.bool,\r\n    imgSrc: PropTypes.string,\r\n    saveData: PropTypes.string,\r\n    immediateLoading: PropTypes.bool,\r\n    hideInterface: PropTypes.bool\r\n  };\r\n\r\n  static defaultProps = {\r\n    onChange: null,\r\n    loadTimeOffset: 5,\r\n    lazyRadius: 12,\r\n    brushRadius: 10,\r\n    brushColor: \"#444\",\r\n    catenaryColor: \"#0a0302\",\r\n    gridColor: \"rgba(150,150,150,0.17)\",\r\n    backgroundColor: \"#FFF\",\r\n    hideGrid: false,\r\n    canvasWidth: 400,\r\n    canvasHeight: 400,\r\n    disabled: false,\r\n    imgSrc: \"\",\r\n    saveData: \"\",\r\n    immediateLoading: false,\r\n    hideInterface: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.canvas = {};\r\n    this.ctx = {};\r\n\r\n    this.catenary = new Catenary();\r\n\r\n    this.points = [];\r\n    this.lines = [];\r\n\r\n    this.mouseHasMoved = true;\r\n    this.valuesChanged = true;\r\n    this.isDrawing = false;\r\n    this.isPressing = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.lazy = new LazyBrush({\r\n      radius: this.props.lazyRadius * window.devicePixelRatio,\r\n      enabled: true,\r\n      initialPoint: {\r\n        x: window.innerWidth / 2,\r\n        y: window.innerHeight / 2\r\n      }\r\n    });\r\n    this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\r\n\r\n    this.canvasObserver = new ResizeObserver((entries, observer) =>\r\n      this.handleCanvasResize(entries, observer)\r\n    );\r\n    this.canvasObserver.observe(this.canvasContainer);\r\n\r\n    this.drawImage();\r\n    this.loop();\r\n\r\n    window.setTimeout(() => {\r\n      const initX = window.innerWidth / 2;\r\n      const initY = window.innerHeight / 2;\r\n      this.lazy.update(\r\n        { x: initX - this.chainLength / 4, y: initY },\r\n        { both: true }\r\n      );\r\n      this.lazy.update(\r\n        { x: initX + this.chainLength / 4, y: initY },\r\n        { both: false }\r\n      );\r\n      this.mouseHasMoved = true;\r\n      this.valuesChanged = true;\r\n      this.clear();\r\n\r\n      // Load saveData from prop if it exists\r\n      if (this.props.saveData) {\r\n        this.loadSaveData(this.props.saveData);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.lazyRadius !== this.props.lazyRadius) {\r\n      // Set new lazyRadius values\r\n      this.chainLength = this.props.lazyRadius * window.devicePixelRatio;\r\n      this.lazy.setRadius(this.props.lazyRadius * window.devicePixelRatio);\r\n    }\r\n\r\n    if (prevProps.saveData !== this.props.saveData) {\r\n      this.loadSaveData(this.props.saveData);\r\n    }\r\n\r\n    if (JSON.stringify(prevProps) !== JSON.stringify(this.props)) {\r\n      // Signal this.loop function that values changed\r\n      this.valuesChanged = true;\r\n    }\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    this.canvasObserver.unobserve(this.canvasContainer);\r\n  };\r\n\r\n  drawImage = () => {\r\n    if (!this.props.imgSrc) return;\r\n\r\n    // Load the image\r\n    this.image = new Image();\r\n\r\n    // Prevent SecurityError \"Tainted canvases may not be exported.\" #70\r\n    this.image.crossOrigin = \"anonymous\";\r\n\r\n    // Draw the image once loaded\r\n    this.image.onload = () =>\r\n      drawImage({ ctx: this.ctx.grid, img: this.image });\r\n    this.image.src = this.props.imgSrc;\r\n  };\r\n\r\n  undo = () => {\r\n    const lines = this.lines.slice(0, -1);\r\n    this.clear();\r\n    this.simulateDrawingLines({ lines, immediate: true });\r\n    this.triggerOnChange();\r\n  };\r\n\r\n  getSaveData = () => {\r\n    // Construct and return the stringified saveData object\r\n    return JSON.stringify({\r\n      lines: this.lines,\r\n      width: this.props.canvasWidth,\r\n      height: this.props.canvasHeight\r\n    });\r\n  };\r\n\r\n  loadSaveData = (saveData, immediate = this.props.immediateLoading) => {\r\n    if (typeof saveData !== \"string\") {\r\n      throw new Error(\"saveData needs to be of type string!\");\r\n    }\r\n\r\n    const { lines, width, height } = JSON.parse(saveData);\r\n\r\n    if (!lines || typeof lines.push !== \"function\") {\r\n      throw new Error(\"saveData.lines needs to be an array!\");\r\n    }\r\n\r\n    this.clear();\r\n\r\n    if (\r\n      width === this.props.canvasWidth &&\r\n      height === this.props.canvasHeight\r\n    ) {\r\n      this.simulateDrawingLines({\r\n        lines,\r\n        immediate\r\n      });\r\n    } else {\r\n      // we need to rescale the lines based on saved & current dimensions\r\n      const scaleX = this.props.canvasWidth / width;\r\n      const scaleY = this.props.canvasHeight / height;\r\n      const scaleAvg = (scaleX + scaleY) / 2;\r\n\r\n      this.simulateDrawingLines({\r\n        lines: lines.map(line => ({\r\n          ...line,\r\n          points: line.points.map(p => ({\r\n            x: p.x * scaleX,\r\n            y: p.y * scaleY\r\n          })),\r\n          brushRadius: line.brushRadius * scaleAvg\r\n        })),\r\n        immediate\r\n      });\r\n    }\r\n  };\r\n\r\n  simulateDrawingLines = ({ lines, immediate }) => {\r\n    // Simulate live-drawing of the loaded lines\r\n    // TODO use a generator\r\n    let curTime = 0;\r\n    let timeoutGap = immediate ? 0 : this.props.loadTimeOffset;\r\n\r\n    lines.forEach(line => {\r\n      const { points, brushColor, brushRadius } = line;\r\n\r\n      // Draw all at once if immediate flag is set, instead of using setTimeout\r\n      if (immediate) {\r\n        // Draw the points\r\n        this.drawPoints({\r\n          points,\r\n          brushColor,\r\n          brushRadius\r\n        });\r\n\r\n        // Save line with the drawn points\r\n        this.points = points;\r\n        this.saveLine({ brushColor, brushRadius });\r\n        return;\r\n      }\r\n\r\n      // Use timeout to draw\r\n      for (let i = 1; i < points.length; i++) {\r\n        curTime += timeoutGap;\r\n        window.setTimeout(() => {\r\n          this.drawPoints({\r\n            points: points.slice(0, i + 1),\r\n            brushColor,\r\n            brushRadius\r\n          });\r\n        }, curTime);\r\n      }\r\n\r\n      curTime += timeoutGap;\r\n      window.setTimeout(() => {\r\n        // Save this line with its props instead of this.props\r\n        this.points = points;\r\n        this.saveLine({ brushColor, brushRadius });\r\n      }, curTime);\r\n    });\r\n  };\r\n\r\n  handleDrawStart = e => {\r\n    e.preventDefault();\r\n\r\n    // Start drawing\r\n    this.isPressing = true;\r\n\r\n    const { x, y } = this.getPointerPos(e);\r\n\r\n    if (e.touches && e.touches.length > 0) {\r\n      // on touch, set catenary position to touch pos\r\n      this.lazy.update({ x, y }, { both: true });\r\n    }\r\n\r\n    // Ensure the initial down position gets added to our line\r\n    this.handlePointerMove(x, y);\r\n  };\r\n\r\n  handleDrawMove = e => {\r\n    e.preventDefault();\r\n\r\n    const { x, y } = this.getPointerPos(e);\r\n    this.handlePointerMove(x, y);\r\n  };\r\n\r\n  handleDrawEnd = e => {\r\n    e.preventDefault();\r\n\r\n    // Draw to this end pos\r\n    this.handleDrawMove(e);\r\n\r\n    // Stop drawing & save the drawn line\r\n    this.isDrawing = false;\r\n    this.isPressing = false;\r\n    this.saveLine();\r\n  };\r\n\r\n  handleCanvasResize = (entries, observer) => {\r\n    const saveData = this.getSaveData();\r\n    for (const entry of entries) {\r\n      const { width, height } = entry.contentRect;\r\n      this.setCanvasSize(this.canvas.interface, width, height);\r\n      this.setCanvasSize(this.canvas.drawing, width, height);\r\n      this.setCanvasSize(this.canvas.temp, width, height);\r\n      this.setCanvasSize(this.canvas.grid, width, height);\r\n\r\n      this.drawGrid(this.ctx.grid);\r\n      this.drawImage();\r\n      this.loop({ once: true });\r\n    }\r\n    this.loadSaveData(saveData, true);\r\n  };\r\n\r\n  setCanvasSize = (canvas, width, height) => {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    canvas.style.width = width;\r\n    canvas.style.height = height;\r\n  };\r\n\r\n  getPointerPos = e => {\r\n    const rect = this.canvas.interface.getBoundingClientRect();\r\n\r\n    // use cursor pos as default\r\n    let clientX = e.clientX;\r\n    let clientY = e.clientY;\r\n\r\n    // use first touch if available\r\n    if (e.changedTouches && e.changedTouches.length > 0) {\r\n      clientX = e.changedTouches[0].clientX;\r\n      clientY = e.changedTouches[0].clientY;\r\n    }\r\n\r\n    // return mouse/touch position inside canvas\r\n    return {\r\n      x: clientX - rect.left,\r\n      y: clientY - rect.top\r\n    };\r\n  };\r\n\r\n  handlePointerMove = (x, y) => {\r\n    if (this.props.disabled) return;\r\n\r\n    this.lazy.update({ x, y });\r\n    const isDisabled = !this.lazy.isEnabled();\r\n\r\n    if (\r\n      (this.isPressing && !this.isDrawing) ||\r\n      (isDisabled && this.isPressing)\r\n    ) {\r\n      // Start drawing and add point\r\n      this.isDrawing = true;\r\n      this.points.push(this.lazy.brush.toObject());\r\n    }\r\n\r\n    if (this.isDrawing) {\r\n      // Add new point\r\n      this.points.push(this.lazy.brush.toObject());\r\n\r\n      // Draw current points\r\n      this.drawPoints({\r\n        points: this.points,\r\n        brushColor: this.props.brushColor,\r\n        brushRadius: this.props.brushRadius\r\n      });\r\n    }\r\n\r\n    this.mouseHasMoved = true;\r\n  };\r\n\r\n  drawPoints = ({ points, brushColor, brushRadius }) => {\r\n    this.ctx.temp.lineJoin = \"round\";\r\n    this.ctx.temp.lineCap = \"round\";\r\n    this.ctx.temp.strokeStyle = brushColor;\r\n\r\n    this.ctx.temp.clearRect(\r\n      0,\r\n      0,\r\n      this.ctx.temp.canvas.width,\r\n      this.ctx.temp.canvas.height\r\n    );\r\n    this.ctx.temp.lineWidth = brushRadius * 2;\r\n\r\n    let p1 = points[0];\r\n    let p2 = points[1];\r\n\r\n    this.ctx.temp.moveTo(p2.x, p2.y);\r\n    this.ctx.temp.beginPath();\r\n\r\n    for (var i = 1, len = points.length; i < len; i++) {\r\n      // we pick the point between pi+1 & pi+2 as the\r\n      // end point and p1 as our control point\r\n      var midPoint = midPointBtw(p1, p2);\r\n      this.ctx.temp.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\r\n      p1 = points[i];\r\n      p2 = points[i + 1];\r\n    }\r\n    // Draw last line as a straight line while\r\n    // we wait for the next point to be able to calculate\r\n    // the bezier control point\r\n    this.ctx.temp.lineTo(p1.x, p1.y);\r\n    this.ctx.temp.stroke();\r\n  };\r\n\r\n  saveLine = ({ brushColor, brushRadius } = {}) => {\r\n    if (this.points.length < 2) return;\r\n\r\n    // Save as new line\r\n    this.lines.push({\r\n      points: [...this.points],\r\n      brushColor: brushColor || this.props.brushColor,\r\n      brushRadius: brushRadius || this.props.brushRadius\r\n    });\r\n\r\n    // Reset points array\r\n    this.points.length = 0;\r\n\r\n    const width = this.canvas.temp.width;\r\n    const height = this.canvas.temp.height;\r\n\r\n    // Copy the line to the drawing canvas\r\n    this.ctx.drawing.drawImage(this.canvas.temp, 0, 0, width, height);\r\n\r\n    // Clear the temporary line-drawing canvas\r\n    this.ctx.temp.clearRect(0, 0, width, height);\r\n\r\n    this.triggerOnChange();\r\n  };\r\n\r\n  triggerOnChange = () => {\r\n    this.props.onChange && this.props.onChange(this);\r\n  };\r\n\r\n  clear = () => {\r\n    this.lines = [];\r\n    this.valuesChanged = true;\r\n    this.ctx.drawing.clearRect(\r\n      0,\r\n      0,\r\n      this.canvas.drawing.width,\r\n      this.canvas.drawing.height\r\n    );\r\n    this.ctx.temp.clearRect(\r\n      0,\r\n      0,\r\n      this.canvas.temp.width,\r\n      this.canvas.temp.height\r\n    );\r\n  };\r\n\r\n  loop = ({ once = false } = {}) => {\r\n    if (this.mouseHasMoved || this.valuesChanged) {\r\n      const pointer = this.lazy.getPointerCoordinates();\r\n      const brush = this.lazy.getBrushCoordinates();\r\n\r\n      this.drawInterface(this.ctx.interface, pointer, brush);\r\n      this.mouseHasMoved = false;\r\n      this.valuesChanged = false;\r\n    }\r\n\r\n    if (!once) {\r\n      window.requestAnimationFrame(() => {\r\n        this.loop();\r\n      });\r\n    }\r\n  };\r\n\r\n  drawGrid = ctx => {\r\n    if (this.props.hideGrid) return;\r\n\r\n    console.log('drawGrid!');\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    ctx.beginPath();\r\n    ctx.setLineDash([5, 1]);\r\n    ctx.setLineDash([]);\r\n    ctx.strokeStyle = this.props.gridColor;\r\n    ctx.lineWidth = 0.5;\r\n\r\n    const gridSize = 25;\r\n\r\n    // let countX = 0;\r\n    // while (countX < ctx.canvas.width) {\r\n    //   countX += gridSize;\r\n    //   ctx.moveTo(countX, 0);\r\n    //   ctx.lineTo(countX, ctx.canvas.height);\r\n    // }\r\n    // ctx.stroke();\r\n\r\n    // let countY = 0;\r\n    // while (countY < ctx.canvas.height) {\r\n    //   countY += gridSize;\r\n    //   ctx.moveTo(0, countY);\r\n    //   ctx.lineTo(ctx.canvas.width, countY);\r\n    // }\r\n    // ctx.stroke();\r\n\r\n    let countX = 25;\r\n    let countY = 25;\r\n\r\n    while (countX < ctx.canvas.width) {\r\n      countY = 25;\r\n      while (countY < ctx.canvas.height) {\r\n        ctx.moveTo(countX, countY);\r\n        ctx.arc(countX, countY, 1, 0, 2*Math.PI);\r\n        countY += gridSize;\r\n      }\r\n\r\n      countX += gridSize;\r\n    }\r\n\r\n    ctx.stroke();\r\n  };\r\n\r\n  drawInterface = (ctx, pointer, brush) => {\r\n    if (this.props.hideInterface) return;\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    // Draw brush preview\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.props.brushColor;\r\n    ctx.arc(brush.x, brush.y, this.props.brushRadius, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n\r\n    // Draw mouse point (the one directly at the cursor)\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.props.catenaryColor;\r\n    ctx.arc(pointer.x, pointer.y, 4, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n\r\n    // Draw catenary\r\n    if (this.lazy.isEnabled()) {\r\n      ctx.beginPath();\r\n      ctx.lineWidth = 2;\r\n      ctx.lineCap = \"round\";\r\n      ctx.setLineDash([2, 4]);\r\n      ctx.strokeStyle = this.props.catenaryColor;\r\n      this.catenary.drawToCanvas(\r\n        this.ctx.interface,\r\n        brush,\r\n        pointer,\r\n        this.chainLength\r\n      );\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Draw brush point (the one in the middle of the brush preview)\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.props.catenaryColor;\r\n    ctx.arc(brush.x, brush.y, 2, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={this.props.className}\r\n        style={{\r\n          display: \"block\",\r\n          background: this.props.backgroundColor,\r\n          touchAction: \"none\",\r\n          width: this.props.canvasWidth,\r\n          height: this.props.canvasHeight,\r\n          ...this.props.style\r\n        }}\r\n        ref={container => {\r\n          if (container) {\r\n            this.canvasContainer = container;\r\n          }\r\n        }}\r\n      >\r\n        {canvasTypes.map(({ name, zIndex }) => {\r\n          const isInterface = name === \"interface\";\r\n          return (\r\n            <canvas\r\n              key={name}\r\n              ref={canvas => {\r\n                if (canvas) {\r\n                  this.canvas[name] = canvas;\r\n                  this.ctx[name] = canvas.getContext(\"2d\");\r\n                }\r\n              }}\r\n              style={{ ...canvasStyle, zIndex }}\r\n              onMouseDown={isInterface ? this.handleDrawStart : undefined}\r\n              onMouseMove={isInterface ? this.handleDrawMove : undefined}\r\n              onMouseUp={isInterface ? this.handleDrawEnd : undefined}\r\n              onMouseOut={isInterface ? this.handleDrawEnd : undefined}\r\n              onTouchStart={isInterface ? this.handleDrawStart : undefined}\r\n              onTouchMove={isInterface ? this.handleDrawMove : undefined}\r\n              onTouchEnd={isInterface ? this.handleDrawEnd : undefined}\r\n              onTouchCancel={isInterface ? this.handleDrawEnd : undefined}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}","/** \r\n * Original from: https://stackoverflow.com/questions/21961839/simulation-background-size-cover-in-canvas\r\n * Original By Ken Fyrstenberg Nilsen\r\n * \r\n * Note: img must be fully loaded or have correct width & height set.\r\n */\r\n export default function drawImageProp({ctx, img, x, y, w, h, offsetX, offsetY} = {}) {\r\n    // Defaults\r\n    if (typeof x !== \"number\") x = 0;\r\n    if (typeof y !== \"number\") y = 0;\r\n    if (typeof w !== \"number\") w = ctx.canvas.width;\r\n    if (typeof h !== \"number\") h = ctx.canvas.height;\r\n    if (typeof offsetX !== \"number\") offsetX = 0.5;\r\n    if (typeof offsetY !== \"number\") offsetY = 0.5;\r\n  \r\n    // keep bounds [0.0, 1.0]\r\n    if (offsetX < 0) offsetX = 0;\r\n    if (offsetY < 0) offsetY = 0;\r\n    if (offsetX > 1) offsetX = 1;\r\n    if (offsetY > 1) offsetY = 1;\r\n  \r\n    var iw = img.width,\r\n      ih = img.height,\r\n      r = Math.min(w / iw, h / ih),\r\n      nw = iw * r, // new prop. width\r\n      nh = ih * r, // new prop. height\r\n      cx,\r\n      cy,\r\n      cw,\r\n      ch,\r\n      ar = 1;\r\n  \r\n    // decide which gap to fill\r\n    if (nw < w) ar = w / nw;\r\n    if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh; // updated\r\n    nw *= ar;\r\n    nh *= ar;\r\n  \r\n    // calc source rectangle\r\n    cw = iw / (nw / w);\r\n    ch = ih / (nh / h);\r\n  \r\n    cx = (iw - cw) * offsetX;\r\n    cy = (ih - ch) * offsetY;\r\n  \r\n    // make sure source rectangle is valid\r\n    if (cx < 0) cx = 0;\r\n    if (cy < 0) cy = 0;\r\n    if (cw > iw) cw = iw;\r\n    if (ch > ih) ch = ih;\r\n  \r\n    // fill image in dest. rectangle\r\n    ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);\r\n  }","import React from 'react';\r\nimport CanvasDraw from \"../my-canvas\";\r\n\r\nimport { List, Map } from 'immutable';\r\nimport {\r\n  EditorState,\r\n  Modifier,\r\n  SelectionState,\r\n  genKey,\r\n  ContentBlock\r\n} from 'draft-js';\r\n\r\nimport decorateComponentWithProps from 'decorate-component-with-props';\r\n\r\nclass MyCanvasDraw extends React.Component {\r\n  state = {\r\n    mode: 'pen'\r\n  };\r\n\r\n  onChangeSize = dir => {\r\n    let editorState = this.props.getEditorState();\r\n    let contentState = editorState.getCurrentContent();\r\n    let block = this.props.block;\r\n\r\n    let selectionState = new SelectionState({\r\n      anchorKey: block.getKey(),\r\n      anchorOffset: 0,\r\n      focusKey: block.getKey(),\r\n      focusOffset: 0\r\n    });\r\n\r\n    let blockData = Map();\r\n    let newHeight = block.getData().get('height');\r\n\r\n    if (dir == 'smaller') {\r\n      newHeight = newHeight == 200 ? 200 : newHeight - 100;\r\n    } else {\r\n      newHeight = newHeight == 600 ? 600 : newHeight + 100;\r\n    }\r\n\r\n    blockData = blockData.set('height', newHeight);\r\n\r\n    let newContentState = Modifier.mergeBlockData(contentState, selectionState, blockData);\r\n    let newEditorState = EditorState.push(editorState, newContentState, 'change-block-data');\r\n\r\n    this.props.setEditorState(newEditorState);\r\n  }\r\n\r\n  onToggleMode = () => {\r\n    console.log('onToggleMode');\r\n    \r\n    let editorState = this.props.getEditorState();\r\n    let contentState = editorState.getCurrentContent();\r\n    let block = this.props.block;\r\n\r\n    this.setState({\r\n      mode: block.getData().get('mode') == 'pen' ? 'eraser' : 'pen'\r\n    });\r\n\r\n    let selectionState = new SelectionState({\r\n      anchorKey: block.getKey(),\r\n      anchorOffset: 0,\r\n      focusKey: block.getKey(),\r\n      focusOffset: 0\r\n    });\r\n\r\n    let blockData = Map();\r\n    blockData = blockData.set('mode', block.getData().get('mode') == 'pen' ? 'eraser' : 'pen');\r\n\r\n    let newContentState = Modifier.mergeBlockData(contentState, selectionState, blockData);\r\n    let newEditorState = EditorState.push(editorState, newContentState, 'change-block-data');\r\n    this.props.setEditorState(newEditorState);\r\n  }\r\n\r\n  render() {\r\n    let block = this.props.block;\r\n    let height = block.getData().get('height');\r\n    let width = block.getData().get('size');\r\n    let mode = block.getData().get('mode');\r\n\r\n    let brush;\r\n\r\n    if (mode == 'pen') {\r\n      brush = {\r\n        radius: 1,\r\n        color: 'rgba(0, 0, 0, 1)'\r\n      };\r\n    } else {\r\n      brush = {\r\n        radius: 20,\r\n        color: 'rgba(255, 255, 255, 1)'\r\n      };\r\n    }\r\n\r\n    return (\r\n      <div style={{display: 'flex', flexDirection: 'row'}}>\r\n        <CanvasDraw\r\n          brushRadius={brush.radius}\r\n          brushColor={brush.color}\r\n          lazyRadius={0}\r\n          canvasHeight={height}\r\n          canvasWidth={width}\r\n          hideInterface={true}\r\n          gridColor='#7182AD'\r\n          ref={ref => this.canvasRef = ref }\r\n        />\r\n        <div style={{marginLeft: 5, display: 'flex', flexDirection: 'column'}}>\r\n          <button onClick={() => { this.onChangeSize('bigger'); }} style={{marginBottom: '5px'}}>\r\n            Bigger\r\n          </button>\r\n          <button onClick={() => { this.onChangeSize('smaller'); }} style={{marginBottom: '5px'}}>\r\n            Smaller\r\n          </button>\r\n          <button style={mode == 'eraser' ? {backgroundColor: 'orange', color: 'white'} : {}} onClick={() => {\r\n            this.canvasRef && this.canvasRef.undo();\r\n          }}>\r\n            Undo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction handleSlashCommand(editorState) {\r\n  let selection = editorState.getSelection();\r\n  let contentState = editorState.getCurrentContent();\r\n  let currentBlock = contentState.getBlockForKey(selection.getStartKey());\r\n  let currentText = currentBlock.getText();\r\n\r\n  if (currentText == '/sketch') {\r\n    let selectionState = new SelectionState({\r\n      anchorKey: currentBlock.getKey(),\r\n      anchorOffset: 0,\r\n      focusKey: currentBlock.getKey(),\r\n      focusOffset: currentText.length\r\n    });\r\n\r\n    let newContentState = Modifier.setBlockType(contentState, selectionState, 'atomic');\r\n\r\n    let blockData = Map();\r\n    blockData = blockData.set('height', 400);\r\n    blockData = blockData.set('size', 800);\r\n    blockData = blockData.set('mode', 'pen');\r\n    newContentState = Modifier.mergeBlockData(newContentState, selectionState, blockData);\r\n\r\n    newContentState = newContentState.createEntity('CANVAS', 'IMMUTABLE', {content: ''});\r\n    let entityKey = newContentState.getLastCreatedEntityKey();\r\n\r\n    newContentState = Modifier.applyEntity(newContentState, selectionState, entityKey);\r\n  \r\n    let newEditorState = EditorState.push(editorState, newContentState, 'change-block-type');\r\n\r\n    const newBlock = new ContentBlock({\r\n      key: genKey(),\r\n      type: 'unstyled',\r\n      text: '',\r\n      characterList: List()\r\n    });\r\n\r\n    newContentState = newEditorState.getCurrentContent();\r\n    let newBlockMap = newContentState.getBlockMap().set(newBlock.key, newBlock);\r\n\r\n    newContentState = newContentState.merge({\r\n      blockMap: newBlockMap\r\n    });\r\n\r\n    newEditorState = EditorState.push(newEditorState, newContentState, 'add-block');\r\n\r\n    newEditorState = EditorState.forceSelection(newEditorState, new SelectionState({\r\n        anchorKey: newBlock.getKey(),\r\n        anchorOffset: 0,\r\n        focusKey: newBlock.getKey(),\r\n        focusOffset: 0\r\n      })\r\n    );\r\n\r\n    return newEditorState;\r\n  } else {\r\n    return editorState;\r\n  }\r\n}\r\n\r\nconst createSketchPlugin = config => {\r\n  const store = {};\r\n  return {\r\n    store,\r\n    initialize({ setEditorState, getEditorState }) {\r\n      store.setEditorState = setEditorState;\r\n      store.getEditorState = getEditorState;\r\n    },\r\n    handleBeforeInput(character, editorState) {\r\n      if (character.match(/[A-z-0-9_*~`]/)) {\r\n        return 'not-handled';\r\n      }\r\n\r\n      const newEditorState = handleSlashCommand(editorState);\r\n\r\n      if (editorState !== newEditorState) {\r\n        store.setEditorState(newEditorState);\r\n        return 'handled';\r\n      }\r\n\r\n      return 'not-handled';\r\n    },\r\n    MyCanvasDraw: decorateComponentWithProps(MyCanvasDraw, store)\r\n  };\r\n}\r\n\r\nexport default createSketchPlugin;","import { ApplicationInsights } from '@microsoft/applicationinsights-web';\r\nimport { ReactPlugin } from '@microsoft/applicationinsights-react-js';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst APP_INSIGHTS_INSTRUMENTATION_KEY = '2ec047c1-12ab-4e4e-86df-4c43e8af07d2';\r\n\r\nconst browserHistory = createBrowserHistory({ basename: '' });\r\nexport const reactPlugin = new ReactPlugin();\r\n\r\nconst appInsights = new ApplicationInsights({\r\n  config: {\r\n    instrumentationKey: APP_INSIGHTS_INSTRUMENTATION_KEY,\r\n    maxBatchInterval: 0,\r\n    extensions: [reactPlugin],\r\n    extensionConfig: {\r\n      [reactPlugin.identifier]: { history: browserHistory }\r\n    }\r\n  }\r\n});\r\n\r\nappInsights.loadAppInsights();\r\n\r\nexport default appInsights;","import { React, Component } from 'react';\nimport Editor from 'draft-js-plugins-editor';\nimport { EditorState, CompositeDecorator, convertToRaw, convertFromRaw, SelectionState } from 'draft-js';\nimport { withAITracking } from '@microsoft/applicationinsights-react-js';\n\nimport createSketchPlugin from './plugins';\nimport createMarkdownShortcutsPlugin from 'draft-js-markdown-shortcuts-plugin';\n\nimport appInsights, { reactPlugin } from './telemetry';\n\nimport './App.css';\n\nconst INLINE_CODE_REGEX = /(?:^|\\s|\\n|[^A-z0-9_*~`])(`)((?!\\1).*?)(\\1)($|\\s|\\n|[^A-z0-9_*~`])/g;\n\nconst initialContentData = '{\"blocks\":[{\"key\":\"5r7hh\",\"text\":\"Directions\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"aklih\",\"text\":\"Enter /sketch to create a sketch block like one below. Try drawing on it!\",\"type\":\"unordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":6,\"length\":7,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"6af9f\",\"text\":\"/sketch\",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":7,\"key\":0}],\"data\":{\"height\":400,\"size\":800,\"mode\":\"pen\"}},{\"key\":\"3u42f\",\"text\":\"Markdown shortcuts (not all) are supported. Make words bold by surrounding them with ** .\",\"type\":\"unordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":55,\"length\":4,\"style\":\"BOLD\"},{\"offset\":85,\"length\":2,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"4lv3f\",\"text\":\"I put this together quick and dirty. There are probably bugs.\",\"type\":\"unordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1fda1\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}],\"entityMap\":{\"0\":{\"type\":\"CANVAS\",\"mutability\":\"IMMUTABLE\",\"data\":{\"content\":\"\"}}}}';\n\nconst compositeDecorator = new CompositeDecorator([\n  {\n    strategy: handleInlineCodeStrategy,\n    component: InlineCodeSpan,\n  },\n]);\n\nfunction handleInlineCodeStrategy(contentBlock, callback, contentState) {\n  findWithRegex(INLINE_CODE_REGEX, contentBlock, callback);\n}\n\nfunction findWithRegex(regex, contentBlock, callback) {\n  const text = contentBlock.getText();\n  let matchArr, start;\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nfunction InlineCodeSpan(props) {\n  return (\n    <span {...props} style={{backgroundColor: '#E1E5EE', color: 'red', borderRadius: '3px', padding: '0px 2px 0px 2px'}}>\n      {props.children}\n    </span>\n  );\n};\n\nconst myStyleMap = {\n  'CODE': {\n    backgroundColor: '#E1E5EE',\n    color: 'red',\n    borderRadius: '3px',\n    padding: '0px 2px 0px 2px'\n  }\n};\n\nconst votedButtonStyle = {\n  marginRight: '5px',\n  backgroundColor: '#17A398',\n  color: 'white' \n};\n\nconst sketchPlugin = createSketchPlugin();\nconst MyCanvasDraw = sketchPlugin.MyCanvasDraw;\n\nconst markdownShortcutsPlugin = createMarkdownShortcutsPlugin();\n\nconst plugins = [markdownShortcutsPlugin, sketchPlugin];\n\nclass App extends Component {\n  state = {\n    editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(initialContentData))),\n    // editorState: EditorState.createEmpty(),\n    voted: null\n  };\n\n  componentDidMount() {\n    this.editor.focus();\n\n    let editorState = this.state.editorState;\n    let contentState = editorState.getCurrentContent();\n    let block = contentState.getLastBlock();\n\n    let selectionState = new SelectionState({\n      anchorKey: block.getKey(),\n      anchorOffset: 0,\n      focusKey: block.getKey(),\n      focusOffset: 0\n    });\n\n    this.onChange(EditorState.forceSelection(editorState, selectionState));\n\n    fetch('https://rootofevil.azurewebsites.net/draft-app/event', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'text/plain',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        name: 'Opened'\n      })\n    });\n  }\n\n  onChange = editorState => {\n    this.setState({ editorState });\n\n    // Note: need to wait on tick to make sure the DOM node has been create by Draft.js\n    // setTimeout(() => {\n    //   let node = document.querySelectorAll(`[data-offset-key=\"${offsetKey}\"]`)[0];\n    //   console.log(`node top: ${node.getBoundingClientRect().top}`);\n    // }, 0);\n  }\n\n  onVote = vote => {\n    this.setState({voted: vote});\n\n    fetch('https://rootofevil.azurewebsites.net/draft-app/event', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'text/plain',\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        name: vote\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor\n          customStyleMap={myStyleMap}\n          editorState={this.state.editorState}\n          onChange={this.onChange}\n          ref={element => { this.editor = element; }}\n          plugins={plugins}\n          blockRendererFn={block => {\n            let { editorState } = this.state;\n            let contentState = editorState.getCurrentContent();\n\n            if (block.getType() === 'atomic') {\n              const entityKey = block.getEntityAt(0);\n\n              if (entityKey != null) {\n                const entity = contentState.getEntity(entityKey);\n\n                if (entity != null && entity.getType() === 'CANVAS') {\n                  return {\n                    component: MyCanvasDraw,\n                    editable: false\n                  };\n                }\n              }\n            }\n          }}\n        />\n        <div style={{marginLeft: '5%'}}>\n          <p style={{marginBottom: '10px'}}>Thanks for taking the time to look. It would help if could tell me what you think.</p>\n          <div>\n            {/* <button onClick={() => {\n              console.log(JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent())));\n            }}>\n              Save\n            </button> */}\n            <button\n              style={this.state.voted !== 'NotInterested' ? {marginRight: '5px'} : votedButtonStyle}\n              onClick={() => { this.onVote('NotInterested'); }}\n            >\n              Not interested.\n            </button>\n            <button\n              style={this.state.voted !== 'Interested' ? {marginRight: '5px'} : votedButtonStyle}\n              onClick={() => { this.onVote('Interested'); }}\n            >\n              This is interesting.\n            </button>\n            <button\n              style={this.state.voted !== 'JustWhatIWanted' ? {marginRight: '5px'} : votedButtonStyle}\n              onClick={() => { this.onVote('JustWhatIWanted'); }}\n            >\n              Just what I need!\n            </button>\n            {this.state.voted && <p style={{marginTop: '5px'}}>Thanks :)</p>}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withAITracking(reactPlugin, App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}